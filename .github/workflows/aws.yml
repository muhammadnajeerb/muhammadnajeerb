# aws.yml - Serverless Price Tracker
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy price tracker with Lambda, SNS, and CloudWatch'

Parameters:
  EmailAddress:
    Type: String
    Description: 'Email for price alerts (e.g., muhammaddahir8172@gmail.com)'
    Default: 'muhammaddahir8172@gmail.com'

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: 'PriceTrackerPermissions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref 'PriceAlertsTopic'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                Resource: !GetAtt 'PriceHistoryTable.Arn'

  # Lambda Function
  PriceTrackerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'PriceTracker'
      Runtime: python3.9
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Code:
        ZipFile: |
          import boto3
          import requests
          from bs4 import BeautifulSoup
          import os
          from datetime import datetime

          sns = boto3.client('sns')
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['HISTORY_TABLE'])

          def scrape_price(url):
              try:
                  headers = {'User-Agent': 'Mozilla/5.0'}
                  response = requests.get(url, headers=headers, timeout=10)
                  soup = BeautifulSoup(response.text, 'html.parser')
                  price = soup.select_one('.a-price-whole')
                  return float(price.get_text().replace(',', '')) if price else None
              except Exception as e:
                  print(f"Scrape error: {str(e)}")
                  return None

          def lambda_handler(event, context):
              products = [
                  {
                      "name": "MacBook Air M2",
                      "url": "https://www.amazon.com/dp/B0B3C5T6J8",
                      "target": 999.00
                  }
              ]

              for product in products:
                  current_price = scrape_price(product['url'])
                  if current_price and current_price <= product['target']:
                      message = f"Price Alert! {product['name']} is now ${current_price} (Target: ${product['target']})"
                      sns.publish(
                          TopicArn=os.environ['SNS_TOPIC'],
                          Message=message,
                          Subject=f"ðŸ’° {product['name']} Price Drop!"
                      )
                      
                      # Record in DynamoDB
                      table.put_item(Item={
                          'ProductID': product['name'],
                          'Timestamp': datetime.now().isoformat(),
                          'Price': str(current_price),
                          'URL': product['url']
                      })

      Environment:
        Variables:
          SNS_TOPIC: !Ref 'PriceAlertsTopic'
          HISTORY_TABLE: !Ref 'PriceHistoryTable'
      Timeout: 30

  # SNS Topic for Alerts
  PriceAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'PriceAlerts'
      Subscription:
        - Protocol: 'email'
          Endpoint: !Ref 'EmailAddress'

  # DynamoDB Table for History
  PriceHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'PriceHistory'
      AttributeDefinitions:
        - AttributeName: 'ProductID'
          AttributeType: 'S'
        - AttributeName: 'Timestamp'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'ProductID'
          KeyType: 'HASH'
        - AttributeName: 'Timestamp'
          KeyType: 'RANGE'
      BillingMode: 'PAY_PER_REQUEST'

  # CloudWatch Rule for Scheduling
  PriceCheckSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Run price check every 6 hours'
      ScheduleExpression: 'rate(6 hours)'
      Targets:
        - Arn: !GetAtt 'PriceTrackerLambda.Arn'
          Id: 'PriceTrackerLambdaTarget'

  # Lambda Permission for CloudWatch
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'PriceTrackerLambda.Arn'
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 'PriceCheckSchedule.Arn'

Outputs:
  SNSSubscriptionNote:
    Description: 'Check your email to confirm SNS subscription'
    Value: !Sub 'Alert emails will be sent to ${EmailAddress}'
  DashboardURL:
    Description: 'Sample Python dashboard to view history (run locally)'
    Value: !Sub 'https://github.com/your-repo/price-tracker#dashboard-setup'
